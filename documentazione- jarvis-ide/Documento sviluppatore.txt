# Jarvis-IDE ‚Äì Documentazione Tecnica Ufficiale

## Visione del Progetto

Jarvis-IDE √® il primo IDE universale open source controllato da un team di intelligenze artificiali, capace di lavorare con qualsiasi modello LLM, sia locale (Ollama, LM Studio, LMDeploy, GGML) che API (OpenAI, Anthropic, Gemini, Groq, ecc.). Mira a superare ogni altro IDE sul mercato offrendo automazione totale, supporto remoto, e intelligenza proattiva.

## Stack Tecnologico
- **Frontend**: React, TypeScript, WebView UI Toolkit
- **Backend**: Node.js, TypeScript, VS Code API
- **AI**: LLM locali/API via protocollo interno + moduli LLaMA, GPT, Gemini, Claude, DeepSeek, Mistral, ecc.
- **Storage**: config/settings.json, system_prompt.md, chat_history.json
- **Testing**: Jest + Testing Library per WebView, tsc --noEmit statico, CI/CD
- **Controllo remoto (fase 2)**: WebSocket Server + Telegram Bot
- **Distribuzione**: .vsix firmato e verificato

## Obiettivi Fondamentali
1. Essere uno sviluppatore autonomo: in grado di scrivere, correggere, testare, generare e spiegare codice.
2. Supportare tutti i linguaggi di programmazione, nessuno escluso.
3. Essere comandabile da remoto tramite API, Telegram o WebSocket.
4. Essere estendibile e modulare, con ogni modulo sostituibile.
5. Superare Cursor, Copilot, Continue, Codeium, JetBrains AI e Replit Ghostwriter.

## Funzionalit√† Core ‚Äì Fase 1
- WebView AI con tema dark
- Editor visivo contextPrompt + system_prompt.md
- UI per selezione modelli (locali/API)
- Pulsanti Salva / Compila / Reset / Log
- API Key gestite localmente e in modo sicuro
- Modalit√† coder_mode, use_docs, multi-agent
- Supporto completo per: .ts, .js, .py, .cs, .cpp, .java, .rs, .go, .html, .json, ecc.
- Gestione persistente di impostazioni e cronologia
- .vsix pulito al 100%, senza riferimenti a cline

## Supporto AI e LLM

### Modelli supportati
- **Locali**: Ollama, LMDeploy, LM Studio, GGML/GGUF, DeepSeek
- **Cloud/API**: OpenAI, Anthropic, Gemini, Mistral, Together, Fireworks, Groq, Perplexity, Claude, Replicate

### Caratteristiche
- Interruttore UI per selezionare modello
- Parametri personalizzati (max_tokens, temperature, ecc.)
- Supporto a modelli coder e non-coder
- Autorizzazioni ai modelli gestibili via UI

## Architettura MCP ‚Äì Agenti AI Interni

| Agente | Funzione |
|--------|----------|
| Planner | Scompone task complessi in micro-task |
| Developer | Scrive codice, lo aggiorna e lo compila |
| Tester | Esegue test automatici ed evidenzia errori |
| Reviewer | Analizza qualit√† e correttezza semantica |
| Integrator | Unisce branch, aggiorna file, coordina merge |
| Documenter | Genera docstring, markdown e commenti |

Ogni agente opera sul workspace con permessi completi: lettura, modifica, cancellazione file, compilazione, test.

## Sicurezza e Tracciabilit√†
- API key archiviate localmente, mai esposte
- Log dettagliato delle azioni AI
- Modalit√† sandbox prima della scrittura reale
- Sistema di veto umano per conferme critiche
- Backup automatico dei file modificati

## Testing e Qualit√†
- **Framework**: Jest, @testing-library/react, tsc --noEmit, CLI test
- **Obiettivi**:
  - 90% copertura minimo per moduli core
  - Test end-to-end per WebView, agenti AI e API backend
  - Testing automatizzato su ogni commit (GitHub Actions)
- **Strumenti**: mock LLM, testing dei log, file virtuali

## Governance e Community
- Repository open su GitHub: jarvis-ide/jarvis-ide
- Branch protetti: main, dev, release
- PR con: test passanti + checklist documentazione + descrizione semantica
- Discussioni e idee tracciate su DISCUSSIONS.md
- Issue ben taggate, assegnate agli agenti o membri

## KPI e Metriche

| Obiettivo | Misura |
|-----------|--------|
| Tempo medio per completamento task | < 10 min con AI attiva |
| Copertura test WebView | ‚â• 90% |
| Modelli supportati | ‚â• 10 locali/API diversi |
| Azioni AI revertibili | 100% con backup automatico |
| Performance LLM | Risposta < 2s (locale), < 1s (API) |

## Estendibilit√†
- Supporto plugin AI custom (/agents)
- Ogni modulo isolato (/core, /ui, /handlers, /types, /server)
- Nuove UI con Web Components
- Fork nativo di VS Code previsto nella Fase 3 (jarvis-code)

## Fasi di Sviluppo

### ‚úÖ Fase 1 ‚Äì Estensione VS Code .vsix
Completamento attuale al 90%
Obiettivo: estensione autonoma, compatibile con tutti i modelli, con interfaccia AI completa.

### üì° Fase 2 ‚Äì Controllo remoto via Telegram
Controllare Jarvis-IDE da cellulare o browser remoto
- WebSocket Server
- AI Gateway Telegram
- Task asincroni e notifiche

### üß¨ Fase 3 ‚Äì Fork nativo di VS Code
Nuovo IDE basato su VS Code, integrato nativamente
- Branding Jarvis-IDE
- Loader LLM integrato
- WebView come componente core

# Strategie di Innovazione per Jarvis-IDE

## 1. Intelligenza adattiva e proattiva
- **Apprendimento contestuale**: Sistema che apprende dai pattern di sviluppo dell'utente per anticipare necessit√† specifiche
- **Rilevamento intelligente del contesto**: Analisi automatica dell'intero workspace per comprendere la struttura del progetto
- **Suggerimenti proattivi**: Offerta di ottimizzazioni di codice, pattern architetturali e refactoring prima che l'utente li richieda

## 2. Personalizzazione profonda
- **Profili di sviluppatore personalizzati**: Profili adattivi allo stile di programmazione individuale
- **Configurazione LLM a pi√π livelli**: Personalizzazione granulare dei parametri LLM per diversi tipi di attivit√†
- **Memoria persistente**: Mantenimento di una memoria a lungo termine degli insights acquisiti su progetti specifici

## 3. Automazione end-to-end
- **CI/CD integrato con AI**: Automazione completa del ciclo di vita del software guidata da AI
- **Generazione automatica di test**: Creazione intelligente di test basata sull'analisi del codice esistente
- **Debugging predittivo**: Identificazione di potenziali bug prima dell'esecuzione del codice

## 4. Integrazione ecosistema
- **API standardizzata per tutti gli LLM**: Interfaccia unificata per tutti i modelli
- **Supporto per ecosistemi specifici**: Integrazione profonda con npm, pip, cargo, maven, etc.
- **Plugin bidirectional**: Comunicazione bidirezionale tra strumenti esterni e agenti AI

## 5. Capacit√† avanzate
- **Generazione completa di microservizi**: Generazione di interi microservizi funzionanti da una descrizione
- **Analisi di codice legacy**: Strumenti specifici per comprendere e modernizzare codice esistente
- **Documentazione viva**: Documentazione che si aggiorna automaticamente quando il codice cambia

## 6. Miglioramenti architetturali
- **Architettura a stato condiviso**: Condivisione di conoscenza e stato tra agenti per decisioni coordinate
- **Sistema di pianificazione gerarchico**: Supporto sia per task granulari che progetti completi
- **Feedback loop continuo**: Sistema di apprendimento costante da successi e fallimenti

## 7. Democratizzazione dell'AI
- **Modalit√† mentor**: Spiegazione delle decisioni di progettazione, non solo generazione di codice
- **Modalit√† apprendimento**: Guida step-by-step per nuovi linguaggi o framework
- **Assistenza multilingua**: Supporto completo per comunicare con l'IDE in qualsiasi lingua

## 8. Innovazioni uniche
- **Modalit√† pair programming AI**: Agente che lavora in parallelo con lo sviluppatore
- **Visualizzazione semantica del codice**: Visualizzazioni che mostrano relazioni tra componenti
- **Sistema di knowledge graph**: Rappresentazione completa di relazioni tra entit√† di codice

## 9. Performance e affidabilit√†
- **Runtime distribuito**: Esecuzione parallela degli agenti AI su server multipli
- **Modalit√† offline robusta**: Funzionalit√† complete anche senza connessione internet
- **Resilience by design**: Auto-ripristino dopo errori o crash

## 10. Governance e sicurezza avanzata
- **Explainable AI**: Giustificazione chiara per ogni decisione presa dagli agenti
- **Privacy by design**: Controllo granulare su quali dati vengono condivisi con i modelli
- **Audit trail completo**: Registro dettagliato di tutte le azioni AI per conformit√† e trasparenza

## Conclusione

Jarvis-IDE non √® solo un'estensione. √à un ambiente intelligente, universale, estendibile, remoto, e completamente programmabile da agenti AI. √à progettato per crescere, imparare e adattarsi, portando ogni sviluppatore al livello successivo. Con le strategie di innovazione proposte, Jarvis-IDE si posiziona come il pi√π avanzato IDE a sviluppo autonomo sul mercato, ridefinendo il futuro della programmazione assistita da AI.