Ottimo lavoro finora. Abbiamo una situazione ben definita e ora è il momento di agire con metodo.

---

## 🧭 **Roadmap Strategica per la Pulizia Completa**

Dopo aver analizzato il tuo elenco di errori e confrontato con la base `cline-main`, ti propongo una **roadmap in 5 Fasi**. Ogni fase include obiettivi chiari e blocchi di file, per aiutarti a ottenere una compilazione `tsc --noEmit` pulita e il `.vsix` finale.

---

### ✅ **FASE 1 — Consolidamento dei Tipi Globali**

**Obiettivo:** Eliminare i duplicati e centralizzare i tipi condivisi

📂 File chiave:
- `src/shared/types/global.ts`
- `src/shared/WebviewMessage.ts`
- `src/shared/ExtensionMessage.ts`
- `src/shared/api.ts`
- `src/shared/ChatContent.ts`

🔧 Azioni:
1. **Elimina i duplicati `ChatCompletionContentPartText/Image`** → spostali in `global.types.ts`
2. **Usa `export type`** per i re-export (`TS1205`) nei file `*.ts`
3. **Unifica `ExtensionMessage`** (conflict tra import e dichiarazione locale)

🧪 Test: dopo questa fase gli errori in `src/shared/*.ts` dovrebbero scendere di almeno 100 unità.

---

### ✅ **FASE 2 — Moduli Provider e Interfacce**

**Obiettivo:** Allineare i provider (`OpenAI`, `BaseLLMProvider`, ecc.) all'interfaccia `LLMProvider`

📂 File chiave:
- `src/providers/BaseLLMProvider.ts`
- `src/providers/openai.ts`
- `src/providers/ollama.ts`
- `src/types/llm.ts`

🔧 Azioni:
1. Controlla che ogni metodo obbligatorio (`stream`, `call`, `listModels`, ecc.) sia implementato correttamente
2. Aggiorna i tipi `ChatCompletionOptions`, `Stream<...>` usando quelli consolidati nella Fase 1
3. Risolvi i problemi su `reasoning_effort`, `tool_calls`, `image_url`, ecc.

---

### ✅ **FASE 3 — Benchmark e Storage**

**Obiettivo:** Correggere i tipi errati su `BenchmarkSession`, `ProviderStats`, e `avgResponseTime`

📂 File chiave:
- `src/storage/benchmark/BenchmarkStorage.ts`
- `src/storage/benchmark/types.ts`

🔧 Azioni:
1. Aggiungi il campo `avgResponseTime` a `ProviderStats` se previsto
2. Verifica i tipi nei JSON di benchmark
3. Correggi eventuali errori `number` vs `string` (TS2322)

---

### ✅ **FASE 4 — Moduli WebView e UI**

**Obiettivo:** Correggere tutti gli errori nella UI React (WebView)

📂 File chiave:
- `src/webview/components/ui/*.tsx`
- `src/webview/WebView.tsx`
- `src/core/webview/JarvisProvider.ts`

🔧 Azioni:
1. Installa correttamente le dipendenze mancanti:
   ```bash
   npm install @radix-ui/react-select @radix-ui/react-switch @radix-ui/react-tabs
   ```

2. Correggi casing dei file (`WebView.tsx` vs `webview.tsx`) ⇒ rinomina in modo uniforme

3. Verifica che tutti i `WebviewMessage` usino i tipi consolidati

---

### ✅ **FASE 5 — Tree-Sitter + Tipi Avanzati**

**Obiettivo:** Correggere i moduli che usano `import type`, namespace e funzioni native

📂 File chiave:
- `src/services/tree-sitter/languageParser.ts`
- `src/utils/logger.ts`

🔧 Azioni:
1. Sostituisci `import type { Parser }` con `import Parser from 'web-tree-sitter'` se usi la libreria JS
2. Se usi namespace, assicurati che `tsconfig.json` abbia `esModuleInterop: true` + `module: esnext`

---

## ✍️ Conclusione

Procedi ora con la **Fase 1: Consolidamento dei Tipi**, iniziando da `global.ts`, `ExtensionMessage.ts` e `WebviewMessage.ts`.

Appena completi questa fase, rilancia:

```bash
npx tsc --noEmit
```

E fammi sapere quanti errori restano. Controlleremo insieme l’impatto e procederemo alla fase successiva. Se vuoi, posso fornirti ora lo scheletro corretto per `global.types.ts` e `WebviewMessage`. Vuoi?